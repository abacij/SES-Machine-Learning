import numpy as np
import matplotlib.pyplot as plt

#Low ELS - Agent 1
nTrials = 60

S_low = np.ones([1,nTrials])
nStim_low = np.size(S_low,0) # Total number of CSs
V_low = np.zeros([nStim_low, nTrials])
V_low[0,0] = 0

# Define the pattern for each set of 4 trials
pattern = [1, 1, 1, 1, 1,1,1,1,1,1,1,-1] #...this is the patterns of gains and losses!
num_repeats = 5 #...repeat the pattern 5 times

# Create the vector with 100 trials
R = np.tile(pattern, num_repeats)

rewards = np.round(np.random.normal(10, 0, size=np.sum(R == 1)))
losses = np.round(np.random.normal(-30, 0, size=np.sum(R == -1)))

tmpR = R.copy()
R[tmpR==1] = rewards#...sample from the rewards
R[tmpR==-1] = losses#...sample from the losses

R_low = np.array([R])
PE_low = np.full([nTrials],np.nan) #From notion

eta_neg = 0.1
eta_pos = 0.7

for t in np.arange(nTrials-1):
  r = R_low[:,t] #This was changed
  s = S_low[:,t]
  v = V_low[:,t]
  #changing eta for wins and losses
  pe = (r - np.sum(v[s==1]))

  if r<0:
    delta = eta_neg * pe #I made losses have a greater learning rate
  elif r>0:
    delta = eta_pos *pe
  V_low[s==1,t+1] = V_low[s==1,t] + delta
  V_low[s==0,t+1] = V_low[s==0,t]

#Trying to plot prediction error here
  PE_low[t] = (r - np.sum(v[s==1]))
#scroll all the way to the bottom to see my attempts at plotting
sumPE_low = np.nansum(PE_low)
meanPE_low = np.nanmean(np.abs(PE_low))
medianPE_low = np.nanmedian(np.abs(PE_low))


#########################################################
#High ELS - Agent 2
nTrials = 60

S_high = np.ones([1,nTrials])
nStim_high = np.size(S_high,0) # Total number of CSs
V_high = np.zeros([nStim_high, nTrials])
V_high[0,0] = 0

# Define the pattern for each set of 4 trials
pattern = [1, 1, 1, 1,1,1,-1, -1,-1,-1,-1,-1]
num_repeats = 5

# Create the vector with 100 trials
R = np.tile(pattern, num_repeats)

rewards = np.round(np.random.normal(10, 0, size=np.sum(R == 1)))
losses = np.round(np.random.normal(-35, 0, size=np.sum(R == -1)))

tmpR = R.copy()
R[tmpR==1] = rewards#...sample from the rewards
R[tmpR==-1] = losses#...sample from the losses

R_high = np.array([R])
PE_high = np.full([nTrials],np.nan) #From notion

eta_neg = 0.9
eta_pos = 0.7

for t in np.arange(nTrials-1):
  r = R_high[:,t]
  s = S_high[:,t]
  v = V_high[:,t]
  # OLD - delta = eta * (r - np.sum(v[s==1]))
  #NEW
  pe = (r - np.sum(v[s==1]))


  if r<0:
    delta = eta_neg * pe #I made losses have a greater learning rate
  elif r>0:
    delta = eta_pos *pe
  V_high[s==1,t+1] = V_high[s==1,t] + delta
  V_high[s==0,t+1] = V_high[s==0,t]
  PE_high[t] = (r - np.sum(v[s==1]))

sumPE_high = np.nansum(PE_high)
meanPE_high = np.nanmean(np.abs(PE_high))
medianPE_high = np.nanmedian(np.abs(PE_high))

plt.plot(np.sum(V_low,0),label = 'Low_ELS')
plt.plot(np.sum(V_high,0),label = 'High_ELS')
plt.xlabel('Trials')
plt.ylabel('Value')
plt.legend()
plt.show()

yMin = -40
yMax = 20

plt.axhline(y=0, color='black')
#plt.scatter(np.arange(nTrials), R_high[0], label = 'Rewards', marker='o', color='blue')
#plt.plot(np.arange(nTrials), R_low[0], label = 'Rewards', color='blue')
plt.scatter(range(np.size(R_low,1)),np.transpose(R_low),label = 'Rewards',color='orange')
plt.plot(np.arange(nTrials),V_low[0,:], label = 'Low ELS Value', linestyle='-', color='blue')
plt.xlabel('Trial')
plt.ylabel('Value')
plt.ylim(yMin, yMax)
plt.title(str(medianPE_low))
plt.legend()
plt.show()

plt.axhline(y=0, color='black')
#plt.scatter(np.arange(nTrials), R_high[0], label = 'Rewards', marker='o', color='blue')
#plt.plot(np.arange(nTrials), R_high[0], label = 'Rewards', color='orange')
plt.scatter(np.arange(nTrials), R_high[0], label = 'Rewards', color='orange')
plt.plot(np.arange(nTrials),V_high[0,:], label = 'High ELS value', linestyle='-', color='blue')
plt.xlabel('Trial')
plt.ylabel('Value')
plt.ylim(yMin, yMax)
plt.title(str(medianPE_high))
plt.legend()
plt.show()

print(np.mean(R_low))
print(np.mean(R_high))
